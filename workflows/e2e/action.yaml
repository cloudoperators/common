name: "E2E Workflow"
description: "Run Greenhouse E2E test against a Kubernetes cluster"
inputs:
  admin-cluster-name:
    description: "The kind cluster name"
    required: false
    default: "greenhouse-admin"
  remote-cluster-name:
    description: "The kind cluster name"
    required: false
    default: "greenhouse-remote"
  k8s-version:
    description: "The Kubernetes version used to spin up clusters"
    required: true
  admin-config:
    description: "The kind cluster configuration file for admin cluster"
    required: false
    default: ""
  remote-config:
    description: "The kind cluster configuration file for remote cluster"
    required: false
    default: ""
  scenario:
    description: "The E2E scenario to run"
    required: true
outputs:
  result:
    description: "The path to the E2E test results"
    value: ${{ steps.e2e.outputs.result }}

runs:
  using: "composite"
  steps:

    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        repository: cloudoperators/greenhouse

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version-file: 'go.mod'

    # Create the admin cluster with latest kubernetes version
    - name: Create Admin Cluster
      uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
      with:
        cluster_name: ${{ inputs.admin-cluster-name }}
        node_image: 'kindest/node:v1.31.0'
        config: ${{ inputs.admin-config }}

    # after admin cluster setup, extract the apiServer CA from kube-root-ca.crt configmap (needed for remote cluster OIDC setup)
    # and create a clusterrolebinding to allow unauthenticated access to the admin cluster for OIDC discovery
    - name: Post Setup Admin Cluster
      shell: bash
      env:
        KUBECONFIG: ${{ runner.temp }}/admin-kubeconfig.yaml
      run: |
        mkdir -p bin
        kind get kubeconfig --name ${{ inputs.admin-cluster-name }} > ${{ runner.temp }}/admin-kubeconfig.yaml
        kubectl get cm kube-root-ca.crt -n default -o json | jq -r '.data."ca.crt"' > bin/greenhouse-admin-ca.crt
        kubectl create clusterrolebinding "oidc-reviewer-binding" \
          --clusterrole="system:service-account-issuer-discovery" \
          --group="system:unauthenticated"

    # Create the remote cluster with kubernetes version from the matrix
    - name: Create Remote Cluster
      uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
      with:
        node_image: 'kindest/node:${{ inputs.k8s-version }}'
        cluster_name: ${{ inputs.remote-cluster-name }}
        config: ${{ inputs.remote-config }}

    # build CLI, setup e2e environment and prepare kubeconfigs
    - name: "Prepare E2E Config"
      shell: bash
      id: config
      run: |
        make setup-e2e
        echo "admin_config=$GITHUB_WORKSPACE/bin/${{inputs.admin-cluster-name}}.kubeconfig" >> $GITHUB_OUTPUT
        echo "remote_config=$GITHUB_WORKSPACE/bin/${{inputs.remote-cluster-name}}.kubeconfig" >> $GITHUB_OUTPUT
        echo "remote_int_config=$GITHUB_WORKSPACE/bin/${{inputs.remote-cluster-name}}-int.kubeconfig" >> $GITHUB_OUTPUT

    # run the e2e tests with the scenario from the matrix
    - name: "E2E Run"
      shell: bash
      id: e2e
      continue-on-error: true
      env:
        SCENARIO: ${{ inputs.scenario }}
        EXECUTION_ENV: gh-actions
        GREENHOUSE_ADMIN_KUBECONFIG: ${{ steps.config.outputs.admin_config }}
        GREENHOUSE_REMOTE_KUBECONFIG: ${{ steps.config.outputs.remote_config }}
        GREENHOUSE_REMOTE_INT_KUBECONFIG: ${{ steps.config.outputs.remote_int_config }}
        CONTROLLER_LOGS_PATH: ${{github.workspace}}/bin/${{inputs.scenario}}-${{inputs.k8s-version}}.txt
        E2E_REPORT_PATH: ${{github.workspace}}/bin/${{inputs.scenario}}-${{matrix.k8s-version}}.json
      run: |
        echo "result=$CONTROLLER_LOGS_PATH" >> $GITHUB_OUTPUT
        make e2e