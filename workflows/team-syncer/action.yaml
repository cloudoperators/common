name: team-syncer
description: Sync teams to all repositories within an organization

inputs:
  CONFIG_REPO:
    description: 'Central repository containing the configuration file'
    required: false
    default: 'common'
  CONFIG_FILE:
    description: 'Path to the configuration file in the central repository'
    required: false
    default: 'teams_config.yaml'
  GH_TOKEN:
    description: 'GitHub token to be stored as a secret. Must have scopes: project, read:org, repo'
    required: true

runs:
  using: "composite"
  steps:
    - name: Set up environment
      shell: bash
      env:
        YQ_VERSION: v4.44.2
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl wget tar
        wget --no-verbose https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64.tar.gz -O - |\
          tar xz && mv yq_linux_amd64 /usr/local/bin/yq && chmod +x /usr/local/bin/yq

    - name: Sync teams to repository
      shell: bash
      run: |
        set -e

        GITHUB_ORG=${{ github.repository_owner }}
        CONFIG_REPO="${GITHUB_ORG}/common"
        CONFIG_FILE="${{ inputs.CONFIG_FILE }}"
        
        SUPPORTED_PERMISSIONS=("pull" "push" "admin" "maintain" "triage")
        
        fetch_config() {
          http_code=$(curl -s -w "%{http_code}" -H "Authorization: token ${{ inputs.GH_TOKEN }}" \
            -L "https://raw.githubusercontent.com/${CONFIG_REPO}/main/${CONFIG_FILE}" \
            -o $CONFIG_FILE)
          if [[ $http_code == 4* ]]; then
            echo "Fetch config failed with HTTP code $http_code"
            exit 1
          fi
        }
        
        function list_repos {
          local page=1
          local all_repos=()
          
          while true; do
            response=$(curl -s -H "Authorization: token ${{ inputs.GH_TOKEN }}" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/orgs/$GITHUB_ORG/repos?page=$page&per_page=100")
            repos=$(echo "$response" | jq -r '.[] | .name')
            
            all_repos+=($repos)
            next_url=$(echo "$response" | grep -i '^Link:' | sed -n 's/.*<\(.*\)>; rel="next".*/\1/p')
            if [ -z "$next_url" ]; then
              break
            fi
            page=$((page + 1))
          done
          echo "${all_repos[@]}"
        }
        
        sync_teams_to_repo() {
          local team=$1
          local permission=$2
          local repository=$3
        
          # Validate permission
          local valid_permission=false
          for p in "${SUPPORTED_PERMISSIONS[@]}"; do
            if [[ "$p" == "$permission" ]]; then
              valid_permission=true
              break
            fi
          done
        
          if [[ "$valid_permission" == false ]]; then
            echo "Invalid permission: $permission for team: $team. Skipping..."
            return
          fi
        
          http_code=$(curl -s -w "%{http_code}" -X PUT -H "Authorization: token ${{ inputs.GH_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/orgs/$GITHUB_ORG/teams/$team/repos/$GITHUB_ORG/$repository" \
            -d "{\"permission\":\"$permission\"}")
          if [[ $http_code == 4* ]]; then
            echo "Syncing team $team with permission $permission to repo $repo failed with HTTP code $http_code"
            exit 1
          fi
        }
        
        # Get the team configuration. 
        fetch_config
        teams=$(yq e '.teams' -o=json "$CONFIG_FILE")

        # Check if teams is empty
        if [ -z "$teams" ]; then
          echo "No teams defined in $CONFIG_FILE"
          exit 1
        fi
        
        # Get all repositories in the organization.
        repositories=$(list_repos)
        
        echo "$teams" | jq -c '.[]' | while read -r team; do
          team_name=$(echo "$team" | jq -r '.name')
          team_permission=$(echo "$team" | jq -r '.permission')
          
          for repo in $repositories; do
            echo "Syncing team: $team_name with permission: $team_permission to repository $GITHUB_ORG/$repo"
            sync_teams_to_repo $team_name $team_permission $repo
          done
        done
